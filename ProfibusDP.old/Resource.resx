<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Auto" xml:space="preserve">
    <value>AUTO</value>
  </data>
  <data name="BeOpend" xml:space="preserve">
    <value>Port has been opened</value>
  </data>
  <data name="CFGErr" xml:space="preserve">
    <value>CFG error</value>
  </data>
  <data name="CFGNO" xml:space="preserve">
    <value>No CFG file</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Closed" xml:space="preserve">
    <value>Port has already been closed.</value>
  </data>
  <data name="ClosePort" xml:space="preserve">
    <value>Please close the port first</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>Copyright@zdh</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Note:\r\n 1. DPMasterSIM DEMO supports single Slave.\r\n2. Max Input/Output Length: 200bytes, Max CFG length: 64bytes, Max PRM Length: 64bytes, \r\n3. Use a RS232/RS485 adpaptor to connect a DP device.\r\n4. DPMasterSIM cannot be used with another DP Master.\r\n\r\n\r\nMannual:\r\n1. To start the DP Master, choose the Port and baudrate first, then Open Port and then start the Master.\r\n2. After the Master is started, all online slave devices will be displayed on the live list, and different color represents different state.\r\n3. By choose menu item “Config-&gt;CFG File”, you can get current configuration, and you can also create, import or change the configuration file, the file is located at the CFG subfolder.\r\n4. When the Master is started, you can choose the tab "Device Control" to diagnose the slave, get the input data and change the output data.\r\n5. After CFG is set, you can press "Automatic Master" button to start DP Master state machine, according to the configuration, the master will set parameter, set CFG, until the slave goes into "DATA_EXCHANGE" state.</value>
  </data>
  <data name="DiagOver" xml:space="preserve">
    <value>Diagnose overflow</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ExtDiag" xml:space="preserve">
    <value>Extended diagnose data</value>
  </data>
  <data name="Finish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="Freeze" xml:space="preserve">
    <value>Freeze mode</value>
  </data>
  <data name="Homepage" xml:space="preserve">
    <value>Web:</value>
  </data>
  <data name="MasterAddr" xml:space="preserve">
    <value>Master Address</value>
  </data>
  <data name="MStart" xml:space="preserve">
    <value>Start Master</value>
  </data>
  <data name="MStop" xml:space="preserve">
    <value>Stop Master</value>
  </data>
  <data name="NoCFG" xml:space="preserve">
    <value>No config!</value>
  </data>
  <data name="NoCFGFile" xml:space="preserve">
    <value>Please set the CFG first</value>
  </data>
  <data name="NoMaster" xml:space="preserve">
    <value>No DP master.</value>
  </data>
  <data name="NonePort" xml:space="preserve">
    <value>No port</value>
  </data>
  <data name="NoPort" xml:space="preserve">
    <value>No serial port Selected</value>
  </data>
  <data name="NotOpen" xml:space="preserve">
    <value>Please open serial port</value>
  </data>
  <data name="NotSupport" xml:space="preserve">
    <value>Service is not supported</value>
  </data>
  <data name="Offline" xml:space="preserve">
    <value>Slave is not online</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Opened" xml:space="preserve">
    <value>Opened</value>
  </data>
  <data name="PrmErr" xml:space="preserve">
    <value>Paramater error</value>
  </data>
  <data name="SlaveStatus" xml:space="preserve">
    <value>Slave status:</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="Station_Not_Ready" xml:space="preserve">
    <value>Station is not ready for DATA EXCHANGE</value>
  </data>
  <data name="Stop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="StopMf" xml:space="preserve">
    <value>Please stop master first</value>
  </data>
  <data name="StopTimer5" xml:space="preserve">
    <value>Please stop monitor first</value>
  </data>
  <data name="Sync" xml:space="preserve">
    <value>Sync mode</value>
  </data>
  <data name="Vendor" xml:space="preserve">
    <value>Vendor</value>
  </data>
  <data name="Ver" xml:space="preserve">
    <value>Version:</value>
  </data>
  <data name="WaitPrm" xml:space="preserve">
    <value>Waiting for PRM</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="WatchDog" xml:space="preserve">
    <value>Watchdog is enabled.</value>
  </data>
</root>